### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AuthPayload {
  token: String!
  user: User!
}

type Avatar {
  id: String!
  owner: User!
  publicId: String!
  url: String!
}

type Comment {
  author: User!
  createdAt: DateTime!
  id: String!
  likes(cursor: UserWhereUniqueInput, skip: Int, take: Int): [User!]!
  post: Post!
  text: String!
  updatedAt: DateTime!
}

input CommentOrderByInput {
  authorId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  postId: SortOrder
  text: SortOrder
  updatedAt: SortOrder
}

input CommentWhereUniqueInput {
  id: String
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

scalar DateTime

type Image {
  id: String!
  owner: Post!
  publicId: String!
  url: String!
}

enum MUTATION_TYPE {
  CREATED
  DELETED
  UPDATED
}

type Mutation {
  addLikeToComment(id: String!): Comment!
  addLikeToPost(id: String!): Post
  createAvatar(image: String!): Avatar!
  createComment(data: createCommentInput!, postId: ID!): Comment!
  createImage(image: String!, postId: ID!): Image!
  createPost(data: createPostInput!): Post!
  createUser(data: createUserInput!): AuthPayload!
  deleteAvatar(id: ID!): Avatar!
  deleteComment(id: ID!): Comment!
  deleteImage(id: ID!): Image!
  deletePost(id: ID!): Post!
  deleteUser: User!
  followUser(id: String!): User!
  removeLikeFromComment(id: String!): Comment!
  removeLikeFromPost(id: String!): Post
  removeSavePost(id: String!): Post!
  savePost(id: String!): Post!
  unfollowUser(id: String!): User!
  updateComment(data: createCommentInput, id: ID!): Comment!
  updatePost(data: updatePostInput!, id: ID!): Post!
  updateUser(data: updateUserInput!): User!
  userLogin(data: loginUserInput!): AuthPayload!
}

type Post {
  author: User!
  body: String!
  comments(cursor: CommentWhereUniqueInput, skip: Int, take: Int): [Comment!]!
  createdAt: DateTime!
  id: String!
  image: Image
  likes(cursor: UserWhereUniqueInput, skip: Int, take: Int): [User!]!
  postSavedByUser(cursor: UserWhereUniqueInput, skip: Int, take: Int): [User!]!
  published: Boolean!
  title: String!
  updatedAt: DateTime!
}

input PostOrderByInput {
  authorId: SortOrder
  body: SortOrder
  createdAt: SortOrder
  id: SortOrder
  published: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

type PostSubscriptionPayload {
  post: Post!
  type: MUTATION_TYPE!
}

input PostWhereUniqueInput {
  id: String
}

type Query {
  comments(cursor: CommentWhereUniqueInput, orderBy: [CommentOrderByInput!], skip: Int, take: Int): [Comment!]!
  drafts(cursor: PostWhereUniqueInput, orderBy: [PostOrderByInput!], skip: Int, take: Int): [Post!]!
  image(productId: ID!): Image!
  me(where: UserWhereUniqueInput!): User
  myComments(cursor: CommentWhereUniqueInput, orderBy: [CommentOrderByInput!], skip: Int, take: Int): [Comment!]!
  myPosts(cursor: PostWhereUniqueInput, orderBy: [PostOrderByInput!], skip: Int, take: Int): [Post!]!
  post(where: PostWhereUniqueInput!): Post
  posts(cursor: PostWhereUniqueInput, orderBy: [PostOrderByInput!], skip: Int, take: Int): [Post!]!
  user(where: UserWhereUniqueInput!): User
  userComments(id: String!, orderBy: CommentOrderByInput, skip: Int, take: Int): [Comment!]!
  userPosts(id: String!, orderBy: PostOrderByInput, skip: Int, take: Int): [Post!]!
  users(cursor: UserWhereUniqueInput, orderBy: [UserOrderByInput!], skip: Int, take: Int): [User!]!
}

enum SortOrder {
  asc
  desc
}

type User {
  comments(cursor: CommentWhereUniqueInput, skip: Int, take: Int): [Comment!]!
  createdAt: DateTime!
  email: String!
  followers(cursor: UserWhereUniqueInput, skip: Int, take: Int): [User!]!
  following(cursor: UserWhereUniqueInput, skip: Int, take: Int): [User!]!
  id: String!
  likedComments(cursor: CommentWhereUniqueInput, skip: Int, take: Int): [Comment!]!
  likedPosts(cursor: PostWhereUniqueInput, skip: Int, take: Int): [Post!]!
  name: String!
  password: String!
  posts(cursor: PostWhereUniqueInput, skip: Int, take: Int): [Post!]!
  savedPosts(cursor: PostWhereUniqueInput, skip: Int, take: Int): [Post!]!
  updatedAt: DateTime!
}

input UserOrderByInput {
  createdAt: SortOrder
  email: SortOrder
  id: SortOrder
  name: SortOrder
  password: SortOrder
  updatedAt: SortOrder
}

input UserWhereUniqueInput {
  email: String
  id: String
}

input createCommentInput {
  text: String!
}

input createPostInput {
  body: String!
  published: Boolean!
  title: String!
}

input createUserInput {
  email: String!
  name: String!
  password: String!
}

input loginUserInput {
  email: String!
  password: String!
}

input updatePostInput {
  body: String
  published: Boolean
  title: String
}

input updateUserInput {
  email: String
  name: String
  password: String
}
